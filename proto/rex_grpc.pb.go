// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RexClient is the client API for Rex service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RexClient interface {
	// Exec executes a specified command and returns the result of *starting*
	// the execution of the command.
	Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error)
}

type rexClient struct {
	cc grpc.ClientConnInterface
}

func NewRexClient(cc grpc.ClientConnInterface) RexClient {
	return &rexClient{cc}
}

func (c *rexClient) Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error) {
	out := new(ExecResponse)
	err := c.cc.Invoke(ctx, "/Rex/Exec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RexServer is the server API for Rex service.
// All implementations must embed UnimplementedRexServer
// for forward compatibility
type RexServer interface {
	// Exec executes a specified command and returns the result of *starting*
	// the execution of the command.
	Exec(context.Context, *ExecRequest) (*ExecResponse, error)
	mustEmbedUnimplementedRexServer()
}

// UnimplementedRexServer must be embedded to have forward compatible implementations.
type UnimplementedRexServer struct {
}

func (*UnimplementedRexServer) Exec(context.Context, *ExecRequest) (*ExecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}
func (*UnimplementedRexServer) mustEmbedUnimplementedRexServer() {}

func RegisterRexServer(s *grpc.Server, srv RexServer) {
	s.RegisterService(&_Rex_serviceDesc, srv)
}

func _Rex_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RexServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Rex/Exec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RexServer).Exec(ctx, req.(*ExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rex_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Rex",
	HandlerType: (*RexServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _Rex_Exec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rex.proto",
}
